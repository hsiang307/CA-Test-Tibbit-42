'DEFINES-------------------------------------------------------------
#ifndef TBT42_SPI_CS
	#define TBT42_SPI_CS PL_IO_NULL
#endif

#ifndef TBT42_SPI_CLK
	#define TBT42_SPI_CLK PL_IO_NULL
#endif

#ifndef TBT42_SPI_MOSI
	#define TBT42_SPI_MOSI PL_IO_NULL
#endif

#ifndef TBT42_SPI_MISO
	#define TBT42_SPI_MISO PL_IO_NULL
#endif

enum errcheck
	TBT42_OK,
	TBT42_SELF_TEST_FAIL,
	TBT42_NO_SSI_AVAILABLE
end enum

'INCLUDES------------------------------------------------------------

'DECLARATIONS--------------------------------------------------------

declare function tbt42_init(use_ssi as no_yes)as errcheck
'Call this function to initialize the Tibbit.
'Use_ssi argument specifies whether you want to communicate with this Tibbit using the SSI channel running in the I2C mode (YES), or
'go for direct I/O manipulation a.k.a. bit-banging (NO).
'Note that there is a limited number of SSI channels so if you set use_ssi=YES this function may return NG, meaning that
'there are no free SSI channels left. This doesn't mean failure. Rather, it means that comms will proceed in bit banging mood.

declare sub tbt42_rtc_get(byref wdaycount as word,byref wmincount as word,byref bsec as byte)
'Reads the current daycount, mincount, and seconds from the RTC. Use year(), month(), date(), hours(), minutes(), and weekday() syscalls
'to convert these values into the actual date and time.

declare function tbt42_rtc_set(wdaycount as word,wmincount as word,bsec as byte)as ok_ng
'Writes the specified daycount, mincount, and seconds into the RTC. Use daycount() and mincount() syscalls
'to convert your date and time into the daycount and mincount values.
'Returns NG if values you supplied are invalid.

declare function tbt42_alarm_set(wdaycount as word, wmincount as word,bsec as byte, enable_alarm as no_yes)as ok_ng
'Sets the alarm if enable_alarm=YES. Disables the alarm if enable_alarm=NO. With alarm enabled...<br>
'- When wdaycount=0 AND wmincount=0 AND bsec=0 alarm occurs every second.<br>
'- When wdaycount=0 AND wmincount=0 AND bsec>0 alarm occurs every minute and on the second specified by bsec.<br>
'- When wdaycount>0 alarm occurs on the date/time specified by the combination of wdaycount, wmincount, and bsec.

declare function tbt42_alarm_waiting()as ok_ng
declare function tbt42_alarm_setting_get(byref wdaycount as word, byref wmincount as word, byref bsec as byte)as no_yes
'Returns NO if alarm is disabled or YES if enabled, in which case wdaycout, wmincount, and bsec will contain
'current alarm settings.

declare sub tbt42_rtc_int_clear()
'Clears the alarm interrupt thus causing the INT line to go HIGH (deactivate).

declare function tbt42_temp_get()as real
'Reads the current temperature. The temperature is measured in steps of 0.25 degrees C.
'Reading the temperature does not cause the actual temperature measurement to occur.
'Measurements happen once in every 64 seconds and are independent of temperature reads.

declare function tbt42_nvram_read(address as byte) as byte
'Reads a byte of data from the non-volatile memory at address 0~255.

declare sub tbt42_nvram_write(data_to_write as byte, address as byte)
'Writes a byte of data into the non-volatile memory at address 0~255.